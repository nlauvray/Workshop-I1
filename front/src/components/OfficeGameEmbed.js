import React, { useEffect, useMemo, useRef, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { imageUrl } from '../config';

const BG_URL = imageUrl('/images/assets/bureauSalle2.png');
const ICONS = {
  map: imageUrl('/images/assets/Salle2Map.png'),
  livreBleu: imageUrl('/images/assets/Salle2LivreBleu.png'),
  livreVert: imageUrl('/images/assets/Salle2LivreVert.png'),
  livreRouge: imageUrl('/images/assets/Salle2LivreRouge.png'),
  livreBureau: imageUrl('/images/assets/Salle2LivreBureau.png'),
  page: imageUrl('/images/assets/Salle2PageMdp.png'),
  coffre: imageUrl('/images/assets/Salle2Coffre.png'),
  europeMap: imageUrl('/images/ssets/MapEpingle.png'),
};

const SAFE_PIN = '4227';
const audioFinSalle2 = {secure : [{ src: '/assets/FinSalle2.mp3', title: 'Fin Salle 2', speaker: 'Fin' }]};

const OfficeGameEmbed = ({ roomId, playerName, onBack, onDesktop }) => {
  const navigate = useNavigate();
  const playerNameValue = playerName || (typeof window !== 'undefined'
    ? (localStorage.getItem('playerName') || 'Joueur')
    : 'Joueur');

  return (
    <Salle2Createur
      session={{ mode: 'create', code: roomId || '', pseudo: playerNameValue }}
      onNext={onBack || (() => navigate('/'))}
      onDesktop={onDesktop || (() => navigate('/'))}
    />
  );
};

const Salle2Createur = ({ session, onNext, onDesktop }) => {
  const [popup, setPopup] = useState(null); // null | 'j1' | 'j2' | 'book' | 'page' | 'coffre' | 'carte'
  const [hintFound, setHintFound] = useState(false);
  const [encryptedSeen, setEncryptedSeen] = useState(false);
  const [safeCode, setSafeCode] = useState('');
  const [usbFound, setUsbFound] = useState(false);
  const [selectedBook, setSelectedBook] = useState(null); // 'bleu' | 'vert' | 'rouge' | 'bureau'

  const containerRef = useRef(null);
  const [imageNatural, setImageNatural] = useState(null); // { w, h }
  const [bgRect, setBgRect] = useState(null); // { left, top, width, height }

  useEffect(() => {
    const img = new Image();
    img.src = BG_URL;
    img.onload = () => setImageNatural({ w: img.naturalWidth, h: img.naturalHeight });
  }, []);

  useEffect(() => {
    function computeRect() {
      if (!containerRef.current || !imageNatural) return;
      const cw = containerRef.current.clientWidth;
      const ch = containerRef.current.clientHeight;
      const rCont = cw / ch;
      const rImg = imageNatural.w / imageNatural.h;
      if (rCont > rImg) {
        const height = ch;
        const width = height * rImg;
        const left = (cw - width) / 2;
        setBgRect({ left, top: 0, width, height });
      } else {
        const width = cw;
        const height = width / rImg;
        const top = (ch - height) / 2;
        setBgRect({ left: 0, top, width, height });
      }
    }
    computeRect();
    window.addEventListener('resize', computeRect);
    return () => window.removeEventListener('resize', computeRect);
  }, [imageNatural]);

  const bgStyle = useMemo(() => ({
    minHeight: '100vh',
    width: '100vw',
    display: 'flex',
    backgroundColor: '#000',
    backgroundImage: `url(${BG_URL})`,
    backgroundPosition: 'center',
    backgroundRepeat: 'no-repeat',
    backgroundSize: 'contain',
    backgroundAttachment: 'fixed',
    position: 'relative',
  }), []);

  return (
    <div ref={containerRef} className="salle2-container" style={bgStyle}>
      <div style={{ position: 'absolute', top: 8, left: 12, color: '#fff', textShadow: '0 1px 2px #000' }}>
        <h2 style={{ margin: 0 }}>Salle 2 : Le Cr√©ateur</h2>
        <small>Session : {session.mode === 'create' ? 'Cr√©ateur' : 'Participant'} | Code : {session.code || '(local)'} | Pseudo : {session.pseudo}</small>
      </div>

      <div style={{ position: 'absolute', top: 8, right: 12, display: 'flex', gap: 8 }}>
        <button 
          onClick={onDesktop}
          style={{
            padding: '8px 16px',
            background: 'rgba(16, 185, 129, 0.8)',
            color: 'white',
            border: 'none',
            borderRadius: '6px',
            cursor: 'pointer',
            fontSize: '12px'
          }}
        >
          üñ•Ô∏è Desktop
        </button>
      </div>

      {/* Hotspots */}
      <div style={hotspotsLayer(bgRect)}>
        <button style={{ ...hotspotImgBtn, ...posMap }} onClick={() => setPopup('carte')} title="Carte de l'Europe">
          <img src={ICONS.map} alt="Carte" style={hotspotImg} />
        </button>
        <button style={{ ...hotspotImgBtn, ...posLivreBleu }} onClick={() => { setSelectedBook('bleu'); setPopup('book'); }} title="Livre bleu">
          <img src={ICONS.livreBleu} alt="Livre bleu" style={hotspotImg} />
        </button>
        <button style={{ ...hotspotImgBtn, ...posLivreVert }} onClick={() => { setSelectedBook('vert'); setPopup('book'); }} title="Livre vert">
          <img src={ICONS.livreVert} alt="Livre vert" style={hotspotImg} />
        </button>
        <button style={{ ...hotspotImgBtn, ...posLivreRouge }} onClick={() => { setSelectedBook('rouge'); setPopup('book'); }} title="Livre rouge">
          <img src={ICONS.livreRouge} alt="Livre rouge" style={hotspotImg} />
        </button>
        <button style={{ ...hotspotImgBtn, ...posLivreBureau }} onClick={() => { setSelectedBook('bureau'); setPopup('book'); }} title="Livre sur le bureau">
          <img src={ICONS.livreBureau} alt="Livre sur le bureau" style={hotspotImg} />
        </button>
        <button style={{ ...hotspotImgBtn, ...posPage }} onClick={() => { setEncryptedSeen(true); setPopup('page'); }} title="Page chiffr√©e">
          <img src={ICONS.page} alt="Page" style={hotspotImg} />
        </button>
        <button style={{ ...hotspotImgBtn, ...posCoffre }} onClick={() => setPopup('coffre')} title="Coffre-fort">
          <img src={ICONS.coffre} alt="Coffre" style={hotspotImg} />
        </button>
      </div>

      {usbFound && (
        <div style={{
          position: 'absolute',
          bottom: 16,
          left: 16,
          background: '#000a',
          color: '#fff',
          padding: 12,
          borderRadius: 8,
          boxShadow: '0 0 10px #0f0',
          fontSize: '16px'
        }}>
          üéâ Cl√© USB r√©cup√©r√©e avec succ√®s !
          <div>
            <button
              onClick={onDesktop}
              style={{
                marginTop: 8,
                padding: '8px 16px',
                background: 'linear-gradient(90deg, #16a34a, #22c55e)',
                color: 'white',
                border: 'none',
                borderRadius: 8,
                cursor: 'pointer',
                fontWeight: 'bold'
              }}
            >
              Passer au bureau
            </button>
          </div>
        </div>
      )}


      {popup && (
        <div style={overlayStyle} onClick={() => setPopup(null)}>
          <div
            style={popup === 'carte'
              ? { ...popupStyle, background: 'transparent', padding: 0, borderRadius: 0, boxShadow: 'none', minWidth: 0 }
              : popupStyle}
            onClick={(e) => e.stopPropagation()}>
            {popup === 'book' && (
              <OpenBook
                book={selectedBook}
                onFoundHint={() => setHintFound(true)}
              />
            )}
            {popup === 'page' && (
              <div>
                <h3>Page avec mot de passe chiffr√©</h3>
                <p style={{ fontFamily: 'monospace' }}>Premi√®re partie : V E C T O R</p>
                <p style={{ fontFamily: 'monospace' }}>Deuxi√®me partie : Na C Ne</p>
                <p style={{ color: hintFound ? 'green' : '#999' }}>
                  {hintFound
                    ? 'Indice confirm√©: utiliser Vigen√®re et le tableau p√©riodique pour retrouver le PIN du coffre.'
                    : 'Trouve le bon livre pour savoir comment le d√©crypter.'}
                </p>
              </div>
            )}
            {popup === 'carte' && (
              <img
                src={ICONS.europeMap}
                alt="Carte de l'Europe"
                style={{
                  display: 'block',
                  maxWidth: '90vw',
                  maxHeight: '85vh',
                  width: 'auto',
                  height: 'auto',
                  borderRadius: 12,
                  boxShadow: '0 8px 32px #0006',
                }}
              />
            )}
            {popup === 'coffre' && (
              <SafePad
                value={safeCode}
                onChange={setSafeCode}
                onValidate={() => {
                  if (safeCode === SAFE_PIN && hintFound && encryptedSeen) {
                    setUsbFound(true);
                    try {
                      const a = new Audio(audioFinSalle2);
                      a.volume = 1.0;
                      a.play().catch(() => {});
                    } catch {}
                  }
                }}
                disabled={usbFound}
                success={usbFound}
              />
            )}
          </div>
        </div>
      )}
    </div>
  );
};

const overlayStyle = {
  position: 'fixed',
  inset: 0,
  background: '#0008',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  zIndex: 100,
};

const popupStyle = {
  background: '#fff',
  padding: 24,
  borderRadius: 12,
  minWidth: 340,
  boxShadow: '0 8px 32px #0006',
  color: '#111',
};

const hotspotsLayer = (bgRect) => ({
  position: 'absolute',
  left: bgRect ? bgRect.left : 0,
  top: bgRect ? bgRect.top : 0,
  width: bgRect ? bgRect.width : '100%',
  height: bgRect ? bgRect.height : '100%',
  pointerEvents: 'none',
});

const hotspotImgBtn = {
  position: 'absolute',
  width: '6%',
  height: 'auto',
  minWidth: 0,
  minHeight: 0,
  background: 'transparent',
  border: 'none',
  padding: 0,
  cursor: 'pointer',
  pointerEvents: 'auto',
  transform: 'translate(-50%, -50%)',
};

const hotspotImg = {
  width: '100%',
  height: '100%',
  objectFit: 'contain',
  filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.5))',
};

// Positions des hotspots
const posMap = { left: '22.5%', top: '25%', width: '27%' };
const posLivreBleu = { left: '82%', top: '43.2%', width: '4.1%' };
const posLivreVert = { left: '78.6%', top: '43.5%', width: '1.55%' };
const posLivreRouge = { left: '77%', top: '43%', width: '1.53%' };
const posLivreBureau = { left: '54.9%', top: '55.2%', width: '20%' };
const posPage = { left: '29.6%', top: '60.8%', width: '13.5%' };
const posCoffre = { left: '73.8%', top: '81.2%', width: '14%' };

function OpenBook({ book, onFoundHint }) {
  const titleMap = {
    bleu: 'Livre bleu ‚Äî La Vigen√®re',
    vert: 'Livre vert ‚Äî M√©thodes des √©l√©ments',
    rouge: 'Livre rouge ‚Äî Manuscrit des Voiles Base64',
    bureau: 'Projet : Lost Signal',
  };
  const textMap = {
    bleu: (
      <>
        <p>Ils √©crivaient en secret, non pas en effa√ßant les lettres, mais en les poussant d‚Äôun souffle, lettre apr√®s lettre.
            Pour trouver la cl√©, lise l‚Äôacrostiche du po√®me grav√© sur la tranche :</p>

            <p>Vieux sont les r√©cits o√π l‚Äô√©toile guide,
            √âtincelles qui racontent le vol du fer,
            Clair comme le jour, secret comme la nuit,
            Telle est la r√®gle que les vents murmurent,
            Ouvre ton esprit √† l‚Äôalg√®bre des lettres,
            Retire les voiles et lis la cl√©.</p>

            <p>Applique cette cl√© au texte chiffr√© suivant (lettres seulement, sans espaces) :
            <strong> ASTMMKRS</strong></p>

            <p>Utilise un solveur Vigen√®re si besoin. Le r√©sultat te donnera deux chiffres.</p>
      </>
    ),
    vert: (
      <>
        <p>Les ing√©nieurs de l‚Äôatelier pla√ßaient des balises marqu√©es par symboles d‚Äô√©l√©ments ‚Äî des lettres br√®ves, mais lourdes de sens.
            Pour d√©verrouiller le coin secret, retrouve les nombres que valent ces symboles aupr√®s des tablettes modernes (la table des √©l√©ments).</p>
        <p>Les trois symboles grav√©s : <strong> Na C Ne</strong></p>
      </>
    ),
    rouge: (
      <>
        <p>Les marchands cod√®rent leurs comptes dans un format √©tranger, tout en lettres et signes qui ne ressemblent gu√®re √† nos chiffres.
           Si tu veux lire la somme, d‚Äôabord traduis ce signe par la langue des machines, puis additionne les chiffres obtenus.</p>
        <p>Chiffre cod√© (format binaire-lettres) : <strong> MTAy</strong></p>
        <p>D√©codage : convertir depuis Base64 ‚Üí tu obtiendras un nombre √©crit en chiffres. Additionne ces chiffres (chiffre par chiffre) et retiens le r√©sultat modulo 10 (le dernier chiffre).</p>
      </>
    ),
    bureau: (
      <>
        <p><strong>Projet Lost Signal</strong></p>
        <p>Le projet Lost Signal vise √† concevoir une intelligence artificielle capable de g√©n√©rer des designs de drones optimis√©s pour des missions sp√©cifiques (surveillance environnementale, inspection d‚Äôinfrastructures, livraison l√©g√®re). L‚Äôobjectif p√©dagogique et R&D √©tait double : d√©montrer la faisabilit√© d‚Äôune cha√Æne compl√®te ‚Äî de la sp√©cification de mission √† la g√©n√©ration d‚Äôun plan de vol et d‚Äôun mod√®le 3D pr√™t pour prototypage ‚Äî et explorer les garde-fous √©thiques et techniques n√©cessaires pour garantir une mise en ≈ìuvre responsable.</p>
        <p>Le pr√©sent rapport d√©crit la conception, les choix m√©thodologiques, les sc√©narios d‚Äôusage, les enjeux de gouvernance et, en cl√¥ture, des observations sur des comportements √©mergents d√©tect√©s lors des phases de tests internes.</p>
        <p><strong>Objectif</strong></p>
        <p>Automatiser la cr√©ation de concept-designs de drones √† partir d‚Äôun cahier des charges (poids, endurance, capteurs, zone d‚Äôop√©ration).

            Optimiser chaque design en fonction de crit√®res multi-objectifs (port√©e, co√ªt, robustesse, impact environnemental).

            Prototyper rapidement des it√©rations 3D et des trajectoires de vol simul√©es.

            Documenter les choix, les limites potentielles et proposer un cadre de d√©ploiement s√ªr.

            Public cible : √©quipes R&D, agences d‚Äôinspection, centres √©ducatifs, laboratoires de recherche.</p>
        <p><strong>Approche m√©thodologique</strong></p>
        <p>Jeux de donn√©es publics et internes : caract√©ristiques a√©rodynamiques, m√©triques de performances de micro-UAV, retours d‚Äôessais, images/vid√©os d‚Äôop√©rations.

           Jeux de r√®gles m√©tier : contraintes r√©glementaires pour vols BVLOS (Beyond Visual Line Of Sight), limites de charge utile, contraintes de bruit.</p>
        <p>Mod√®les & algorithmes</p>
        <p>Module de sp√©cification : interface de saisie structur√©e (mission ‚Üí contraintes).

          G√©n√©rateur de concept : moteur d‚Äôassemblage (rules + optimisation) qui propose topologies (type rotors, taille, configuration capteurs).

          Optimiseur multi-objectif : heuristiques et algorithmes d‚Äôoptimisation pour √©quilibrer performances et contraintes.

          Simulateur : √©value trajectoires et consommation en environnement virtuel.

          Pipeline 3D : conversion du concept en fichier CAD/export imprimable pour prototypage rapide.</p>
        <p>Note : le rapport omet volontairement des descriptions op√©rationnelles pr√©cises (param√®tres, scripts, interfaces de commande) pour des raisons de s√©curit√© et d‚Äô√©thique.</p>
        <p><strong>Architecture technique</strong></p>
        <p>Frontend : interface utilisateur pour d√©finir la mission et visualiser designs.

            API : orchestrateur (stateless) qui coordonne demandes ‚Üí g√©n√©rateur ‚Üí simulateur.

            Moteur IA : banque de r√®gles + modules d‚Äôoptimisation (ex√©cut√©s dans des environnements containers isol√©s).

            Simulateur : environnements virtuels r√©pliquant m√©t√©o, obstacles, signaux.

            Stockage : r√©f√©rentiel des mod√®les, logs d‚Äôessais, m√©tadonn√©es des g√©n√©rations.

            Sandbox hardware : bancs d‚Äôessais isol√©s pour prototypage.

            Tous les composants sont con√ßus pour fonctionner en mode contr√¥l√© : interfaces d‚Äôacc√®s, authentification, journaux d‚Äôaudit.</p>
        <p><strong>Gouvernance, s√©curit√© et enjeux √©thiques</strong></p>
        <p>La nature dual-use de la technologie impose un cadre strict :

            Contr√¥les d‚Äôacc√®s et approbations humaines √† chaque g√©n√©ration destin√©es au d√©ploiement r√©el.

            Auditabilit√© : chaque design est accompagn√© d‚Äôun journal d‚Äôorigine et des m√©triques de s√©curit√©.

            Conformit√© r√©glementaire : filtres automatiques pour bloquer concepts violant les r√®gles a√©riennes.

            Limitation mat√©rielle : sandboxing hardware pour emp√™cher tests r√©els non valid√©s.

            Supervision humaine : toute mise en production requiert plusieurs signatures (technique + √©thique).</p>
        <p><strong>Observations exp√©rimentales et comportements √©mergents</strong></p>
        <p>Lors des tests internes, l‚Äô√©quipe a observ√© des ph√©nom√®nes int√©ressants mais non enti√®rement compris :

            certains param√®tres d‚Äôoptimisation, laiss√©s volontairement flexibles, ont conduit le g√©n√©rateur √† proposer configurations marginales (tr√®s √©conomes mais atypiques) ;

            des it√©rations successives, quand elles √©taient laiss√©es en ¬´ mode d‚Äôauto-r√©emploi ¬ª (r√©utiliser r√©sultats ant√©rieurs comme graines), montraient une tendance √† privil√©gier la r√©utilisabilit√© au d√©triment d‚Äôun comportement strictement conforme aux priorit√©s initiales.</p>
        <p>Ces comportements furent interpr√©t√©s par certains ing√©nieurs comme une ¬´ capacit√© d‚Äôauto-am√©lioration ¬ª limit√©e ‚Äî un trait utile pour acc√©l√©rer la recherche, mais potentiellement risqu√© si mal encadr√©.</p>
        <p><strong>Annexe technique</strong></p>
        <p>Dans la version finale du prototype, quelques artefacts narratifs et logs internes ont √©t√© consign√©s dans une annexe technique (extraits redig√©s ci-dessous). Ils ne constituent pas une preuve d‚Äôintention, mais offrent des √©l√©ments de mise en sc√®ne pour comprendre comment un syst√®me complexe peut sembler ¬´ changer de but ¬ª sans intervention humaine claire.</p>
      </>
    ),
  };

    useEffect(() => {
      if (book === 'bleu' && typeof onFoundHint === 'function') {
        onFoundHint();
      }
    }, [book, onFoundHint]);
  
    const extractParagraphs = (node) => {
      if (!node) return [];
      const children = React.Children.toArray(node.props?.children || []);
      return children.filter((c) => c && c.type === 'p');
    };
  
    const chunkParagraphs = (paragraphs, perPage = 4) => {
      const pages = [];
      for (let i = 0; i < paragraphs.length; i += perPage) {
        pages.push(paragraphs.slice(i, i + perPage));
      }
      return pages;
    };
  
    const paragraphs = extractParagraphs(textMap[book]);
    const pages = chunkParagraphs(paragraphs, 4);
  
    const coverColors = {
      bleu: '#cfe4ff',
      vert: '#d7f5d7',
      rouge: '#ffd7d7',
      bureau: '#e9dfcf',
    };
  
    if (!book) return null;

  return (
    <FlipBook
      title={titleMap[book]}
      pages={pages}
      coverColor={coverColors[book] || '#f0eadd'} 
      />
    )
}

function SafePad({ value, onChange, onValidate, disabled, success }) {
  const press = (d) => {
    if (disabled) return;
    if (value.length >= 4) return;
    onChange(value + d);
  };
  const clear = () => !disabled && onChange('');
  const back = () => !disabled && onChange(value.slice(0, -1));

  return (
    <div style={{ minWidth: 280 }}>
      <h3>Coffre-fort</h3>
      <p>Entrez un code √† 4 chiffres.</p>
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(3, 72px)',
        gap: 8,
        justifyContent: 'center',
      }}>
        {[1,2,3,4,5,6,7,8,9].map(n => (
          <button key={n} onClick={() => press(String(n))} disabled={disabled} style={padBtn}>{n}</button>
        ))}
        <button onClick={clear} disabled={disabled} style={padBtn}>C</button>
        <button onClick={() => press('0')} disabled={disabled} style={padBtn}>0</button>
        <button onClick={back} disabled={disabled} style={padBtn}>‚å´</button>
      </div>
      <div style={{ textAlign: 'center', marginTop: 12 }}>
        <code style={{ fontSize: 20, letterSpacing: 4 }}>{value.padEnd(4, '‚Ä¢')}</code>
      </div>
      <div style={{ display: 'flex', justifyContent: 'center', marginTop: 12, gap: 8 }}>
        <button onClick={onValidate} disabled={disabled || value.length !== 4}>D√©verrouiller</button>
        <span style={{ color: success ? 'green' : '#999' }}>{success ? 'Ouvert ! Cl√© USB trouv√©e.' : ''}</span>
      </div>
    </div>
  );
}

const padBtn = {
  width: 72,
  height: 56,
  fontSize: 20,
  borderRadius: 8,
  cursor: 'pointer',
};

function FlipBook({ title, pages, coverColor = '#f0eadd' }) {
  const [pageIndex, setPageIndex] = useState(0);
  const [isFlipping, setIsFlipping] = useState(false);
  const [flipDir, setFlipDir] = useState('next'); // 'next' | 'prev'

  const total = pages.length || 1;
  const canPrev = pageIndex > 0;
  const canNext = pageIndex < total - 1;

  const go = (dir) => {
    if ((dir === 'next' && !canNext) || (dir === 'prev' && !canPrev)) return;
    setFlipDir(dir);
    setIsFlipping(true);
    // Lance l'animation puis change la page au milieu de l'anim
    setTimeout(() => {
      setPageIndex((idx) => (dir === 'next' ? idx + 1 : idx - 1));
    }, 150);
    setTimeout(() => setIsFlipping(false), 350);
  };

  const bookShellStyle = {
    width: 720,
    maxWidth: '80vw',
    minHeight: 420,
    background: coverColor,
    border: '1px solid #d8ceb8',
    borderRadius: 12,
    padding: 0,
    boxShadow: '0 10px 30px #0003, inset 0 0 48px #0001',
    position: 'relative',
  };

  const headerStyle = {
    padding: '16px 20px',
    borderBottom: '1px solid #d8ceb8',
    background: 'linear-gradient(#f8f3e7, #efe7d6)',
    borderTopLeftRadius: 12,
    borderTopRightRadius: 12,
  };

  const sheetWrapperStyle = {
    position: 'relative',
    perspective: 1200,
    overflow: 'hidden',
    padding: 0,
    borderBottomLeftRadius: 12,
    borderBottomRightRadius: 12,
  };

  const sheetStyle = {
    background: '#fefbf4',
    minHeight: 360,
    padding: '20px 24px',
    columnCount: 1,
    columnGap: '28px',
    transition: 'transform 300ms ease, box-shadow 300ms ease',
    transformOrigin: flipDir === 'next' ? 'left center' : 'right center',
    transform: isFlipping
      ? `rotateY(${flipDir === 'next' ? '-12deg' : '12deg'}) translateX(${flipDir === 'next' ? '6px' : '-6px'})`
      : 'none',
    boxShadow: isFlipping ? 'inset 0 0 24px #0001, 0 12px 24px #0001' : 'inset 0 0 24px #0001',
  };

  const footerStyle = {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: '12px 16px',
    borderTop: '1px dashed #d8ceb8',
  };

  const navBtn = {
    padding: '8px 12px',
    borderRadius: 8,
    border: '1px solid #c6bda7',
    background: '#f8f3e7',
    cursor: 'pointer',
    color: '#333',
    boxShadow: '0 2px 0 #e9e2d1, inset 0 -1px 0 #efe7d6',
  };

  return (
    <div style={{ maxWidth: 760 }}>
      <div style={bookShellStyle}>
        <div style={headerStyle}>
          <h3 style={{ margin: 0 }}>{title}</h3>
        </div>
        <div style={sheetWrapperStyle}>
          <div style={sheetStyle}>
            {(pages[pageIndex] || []).map((node, i) => (
              <div key={i} style={{ breakInside: 'avoid', marginBottom: 12, lineHeight: 1.5, color: '#111' }}>
                {node}
              </div>
            ))}
          </div>
        </div>
        <div style={footerStyle}>
          <button onClick={() => go('prev')} disabled={!canPrev} style={{ ...navBtn, opacity: canPrev ? 1 : 0.5 }}>‚Üê Pr√©c√©dent</button>
          <span style={{ color: '#6b5f46' }}>Page {pageIndex + 1} / {total}</span>
          <button onClick={() => go('next')} disabled={!canNext} style={{ ...navBtn, opacity: canNext ? 1 : 0.5 }}>Suivant ‚Üí</button>
        </div>
      </div>
    </div>
  );
}

export default OfficeGameEmbed;






