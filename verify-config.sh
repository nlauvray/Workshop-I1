#!/bin/bash

# Script de v√©rification de la configuration
# V√©rifie que tous les localhost ont √©t√© remplac√©s par des variables d'environnement

echo "üîç V√©rification de la configuration..."
echo "====================================="

ERRORS=0

# Charger les variables d'environnement
if [ -f .env ]; then
    export $(cat .env | grep -v '^#' | xargs)
fi

echo ""
echo "üìã Variables d'environnement charg√©es:"
echo "   BACKEND_URL: ${BACKEND_URL:-non d√©fini}"
echo "   FRONTEND_URL: ${FRONTEND_URL:-non d√©fini}"
echo "   REACT_APP_BACKEND_URL: ${REACT_APP_BACKEND_URL:-non d√©fini}"
echo "   REACT_APP_PEERJS_HOST: ${REACT_APP_PEERJS_HOST:-non d√©fini}"

echo ""
echo "üîç V√©rification des fichiers..."

# V√©rifier le backend
echo "   Backend (app.py):"
if grep -q "localhost" backend/app.py | grep -v "getenv.*localhost"; then
    echo "   ‚ùå localhost trouv√© dans backend/app.py (en dehors des valeurs par d√©faut)"
    ERRORS=$((ERRORS + 1))
else
    echo "   ‚úÖ Pas de localhost hardcod√© (valeurs par d√©faut OK)"
fi

# V√©rifier les composants React
echo "   Composants React:"
REACT_ERRORS=0
for file in front/src/components/*.js; do
    if [ -f "$file" ]; then
        # Ignorer les valeurs par d√©faut dans process.env.REACT_APP_* || 'localhost'
        if grep -q "localhost" "$file" | grep -v "process.env.*||.*localhost"; then
            echo "   ‚ùå localhost trouv√© dans $(basename $file) (en dehors des valeurs par d√©faut)"
            REACT_ERRORS=$((REACT_ERRORS + 1))
        fi
    fi
done

if [ $REACT_ERRORS -eq 0 ]; then
    echo "   ‚úÖ Aucun localhost hardcod√© trouv√© (valeurs par d√©faut OK)"
else
    ERRORS=$((ERRORS + REACT_ERRORS))
fi

# V√©rifier la configuration PeerJS
echo "   Configuration PeerJS:"
if [ -f peerjs-config.json ]; then
    echo "   ‚úÖ peerjs-config.json g√©n√©r√©"
else
    echo "   ‚ùå peerjs-config.json manquant"
    ERRORS=$((ERRORS + 1))
fi

# V√©rifier le fichier .env
echo "   Fichier .env:"
if [ -f .env ]; then
    echo "   ‚úÖ Fichier .env pr√©sent"
else
    echo "   ‚ùå Fichier .env manquant"
    ERRORS=$((ERRORS + 1))
fi

echo ""
echo "üß™ Test de connectivit√©..."

# Test du backend (si en cours d'ex√©cution)
if curl -s ${BACKEND_URL:-http://localhost:8000}/rooms > /dev/null 2>&1; then
    echo "   ‚úÖ Backend accessible"
else
    echo "   ‚ö†Ô∏è  Backend non accessible (normal si pas d√©marr√©)"
fi

# Test de PeerJS (si en cours d'ex√©cution)
if curl -s http://${REACT_APP_PEERJS_HOST:-localhost}:${REACT_APP_PEERJS_PORT:-9000} > /dev/null 2>&1; then
    echo "   ‚úÖ PeerJS accessible"
else
    echo "   ‚ö†Ô∏è  PeerJS non accessible (normal si pas d√©marr√©)"
fi

echo ""
if [ $ERRORS -eq 0 ]; then
    echo "‚úÖ Configuration OK ! Pr√™t pour le d√©ploiement."
    echo ""
    echo "üöÄ Pour d√©marrer l'application:"
    echo "   ./start_all.sh"
    echo ""
    echo "üè≠ Pour la production:"
    echo "   1. Modifiez .env avec vos URLs de production"
    echo "   2. ./setup-env.sh production"
    echo "   3. ./start_all.sh"
else
    echo "‚ùå $ERRORS erreur(s) trouv√©e(s). V√©rifiez la configuration."
    exit 1
fi
